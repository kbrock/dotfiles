require 'redgreen'  
#require 'autotest/growl'
require 'autotest/fsevent'

Autotest.add_hook :initialize do |at|
  unless ARGV.empty?
    at.find_directories = ARGV.dup
  end
end

Autotest.add_hook :initialize do |at|  
    %w{.svn .hg .git vendor}.each {|exception| at.add_exception(exception)}  
end

Autotest.add_hook(:interrupt) do |at|
  at.wants_to_quit = true
end

# -*- ruby -*-

module Autotest::Growl
  AUTOTEST_IMAGE_ROOT = "~/Pictures"
  #  def self.growl title, msg, img, pri=0, sticky=""
  #    system "growlnotify -n autotest --image #{img} -p #{pri} -m #{msg.inspect} #{title} #{sticky}"
  #  end
  def self.growl title, msg, pri = 0, img = nil
    title += " in #{Dir.pwd.split(/\//).last(3).join("/")}"
    msg += " at #{Time.now.strftime('%Y-%m-%d %H:%M:%S')}"
    # TODO: parameterize default image
    img ||= "/Applications/Mail.app/Contents/Resources/Caution.tiff"
    cmd = "growlnotify -w -n autotest --image #{img} -p #{pri} -m #{msg.inspect} #{title}"
    system cmd
    nil
  end
  
  Autotest.add_hook :initialize do  |at|
    growl "autotest running", "Started"
  end

  Autotest.add_hook :red do |at|
    growl "Fail", "#{at.files_to_test.size} tests failed", 2, "#{AUTOTEST_IMAGE_ROOT}/fail.png"
  end

  Autotest.add_hook :green do |at|
    growl "Passed", "Tests passed", -2, "#{AUTOTEST_IMAGE_ROOT}/pass.png" if at.tainted
  end

  Autotest.add_hook :all_good do |at|
    growl "All Passed", "All tests passed", -2, "#{AUTOTEST_IMAGE_ROOT}/pass.png" if at.tainted
  end
end

# module Autotest::Growl
#  Autotest.add_hook :ran_command do |at|
# 
#    results = [at.results].flatten.join("\n")
# 
#    if results.include? 'tests'
#      output = results.slice(/(\d+)\s+tests?,\s*(\d+)\s+assertions?,\s*(\d+)\s+failures?(,\s*(\d+)\s+errors)?/)
#      if output
#        $~[3].to_i + $~[5].to_i > 0 ? growl_fail(output) : growl_pass(output)
#      end
#    else
#      output = results.slice(/(\d+)\s+examples?,\s*(\d+)\s+failures?(,\s*(\d+)\s+not implemented)?/)
#      if output
#        $~[2].to_i > 0 ? growl_fail(output) : growl_pass(output)
#      end
#    end
#  end
# end

#    filtered = autotest.results.grep(/\d+\s.*examples?/)  
#    output = filtered.empty? ? “” : filtered.last.slice(/(\d+)\s.*examples?,\s(\d+)\s.*failures?(?:,\s(\d+)\s.*pending)?/)  
#    if output =~ /[1-9]\sfailures?/  
#      growl "FAIL", "#{output}", "#{AUTOTEST_IMAGE_ROOT}/fail.png" #rails_fail.png"  
#    elsif output =~ /pending/  
#      growl "Pending", "#{output}", "#{AUTOTEST_IMAGE_ROOT}/rails_pending.png"  
#    else  
#      growl "Pass", "#{output}", "#{AUTOTEST_IMAGE_ROOT}/pass.png" #rails_ok.png"  
#    end  
  
