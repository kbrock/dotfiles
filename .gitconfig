[include]
# contains user.name, user.email, github.token, github.token
  path=~/.gitconfig.local
[alias]
  st = status
  cat = show
  ## git rebase master: rebase current branch to upstream/master
  rem = "!git fetch upstream && git rebase upstream/$(git master-branch)"
  remi = "!git rebase upstream/$(git master-branch) ${@--i}"
  # origin = !sh -c 'git remote add -t ${2:-master} -m ${2:-master} ${1:-origin} ${0}'

  # checkout, but optional. if we are already on the branch, do not checkout
  # this means you do not loose the ability to git checkout - after running this
  optcheckout = "!f() { [[ $(git branch-name) = "$1" ]] || git checkout $1; }; f"

  ## git merge master: checkout master and merge with upstream master
  mem = "!git fetch upstream && git optcheckout $(git master-branch) && git merge --ff-only upstream/$(git master-branch)"
  #origin = !sh -c 'git remote add -t ${2:-master} -m ${2:-master} ${1:-origin} ${0}'

  ## prune my own branches that have been deleted on the server
  prune = fetch --prune

  ## amend current commit keeping the same comment
  amend = commit --amend --no-edit

  ## add a file to .gitignore
  ignore = "!f() { echo \"$@\" >> .gitignore ; }; f"

  ## edit gitconfig file with sublime
  config-subl = "!subl ~/.gitconfig"

  ## fetch a github pull request from upstream: git fetch-pr 151
  fetch-pr = "!f() { git fetch --force --update-head-ok -u ${2:-upstream} refs/pull/$1/head:pr/$1; }; f"
  #fetch-pr = "!f() { git fetch upstream refs/pull/$1/head:refs/remotes/pr/$1; }; f"

  ## rebase a pull request from the current branch (suggestion is to be on master)
  rebase-pr = "!f() { git checkout -b pr_$1 pr/$1; git rebase @{-1}; git checkout @{-2}; git rebase @{-1}; }; f"

  ## create a local branch for a pull request: git checkout-pr 151
  #checkout-pr = "!f() { git fetch-pr $1 ; git checkout -b pr_$1 pr/$1 ; }; f"

  ## name of the current branch
  # e.g.: master
  branch-name  = "symbolic-ref -q --short HEAD"
  #branch-name = "!git for-each-ref --format='%(refname:short)' `git symbolic-ref HEAD`"
  # deprecated name:
  current-branch  = "symbolic-ref --short HEAD"

  ## remove all branches that do not have any commits in them (and have been merged
  branch-prune = "!git optcheckout $(git master-branch) && git branch --merged | grep -v '*' | xargs git branch -d"

  ## tracking branch for the current branch
  tracking-branch = "symbolic-ref HEAD"

  ## remote branch this current branch is tracking
  ## e.g.:  origin
  remote-name  = "!git config branch.$(git branch-name).remote"
  # deprecated name:
  current-remote = "!git config branch.$(git branch-name).remote"

  ## show untracked files
  untracked = "ls-files --others -i --exclude-standard"

  ## url for the current branch ($1 = name of remote) must be linked to master
  ## e.g.: git@github.com:user/prog.git
  remote-url = "! f() { git config remote.${1:-$(git remote-name)}.url ; }; f"

  ## open a pr on production
  # TODO
  # ?merge_request%5Bsource_branch%5D=531_embed_key&merge_request%5Bsource_project_id%5D=69&merge_request%5Btarget_branch%5D=master&merge_request%5Btarget_project_id%5D=59
  # merge_request%5Bsource_project_id%5D=69
  # merge_request%5Bsource_branch%5D=531_embed_key
  # merge_request%5Btarget_project_id%5D=59
  # merge_request%5Btarget_branch%5D=5.3.z
  prodpr="! f() { git push -u gorigin HEAD ; open $(git url downstream compare) ; }; f"

  ## open a pr
  pr = "! f() { open $(git url compare) ; }; f"

  ## open hub-url (origin compare ?expand=1)
  open = "! f() { open $(git url \"$@\") ; }; f"

  ## open upstream
  uopen = "! f() { open $(git url upstream/$(git master-branch) \"$@\") ; }; f"

  ## log in a graph (add --all all branches)
  # see also --oneline
  graph = log --graph --decorate --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(cyan)<%an>%Creset'
  lg = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(cyan)<%an>%Creset'

  ## setup tracking for this branch (default: remote=origin)
  track = "!f() { git branch --set-upstream-to=${1:-origin}/$(git branch-name); }; f"
  ## remove reference to a remote branch. (git fetch will repopulate it)
  branch-remote-delete-regex = "!f() { git branch -r | grep ${1?need a regular expression} | xargs git branch -r -d ; } ; f"

  ## delete my remote branches for a given regular expression (don't delete origin or HEAD)
  # branch-delete-remote git branch -a | awk -F/ ' /origin\/[^mH]/ { print $3 }'

  ## git upstream ($1 = github account. default: manageiq)
  ## create branch upstream based upon origin
  upstream = "!f() { local url=`git url origin` ; git remote add upstream ${url/kbrock/${1:-manageiq}}; }; f"
  downstream = "!f() { local url=`git url production` ; git remote add downstream ${url/kbrock/${1:-cfme}}; }; f"

  ## add a remote for a collaborator
  ## git collaborate bdunne
  ## now uses http (vs ssh) urls
  #     git@github.com:kbrock/manageiq-schema.git
  # https://github.com/kbrock/manageiq.git

  collaborate = "! f() { local remote=$(git config remote.origin.url) ; remote=${remote:-$(git config remote.upstream.url)} ; [[ $remote =~ (https?://[^/]*/|git@[^:]*:)([^/]*)(.*)$ ]] ; git remote add $1 ${BASH_REMATCH[1]}$1${BASH_REMATCH[3]} ; git fetch $1 ; } ; f"
  # fetch a provider (points to miq)
  # not sure if we should check for $USER too
  # not sure if we want to look for manageiq-providers-... and tack it on
  fetch-provider = "! f() { local remote="https://github.com/manageiq/${1}" ; git clone -o upstream $remote && [[ -f providers && $1 =~ ".*provider.*" ]] && (echo $1 >> providers) ; } ; f"
  # unsure
  fixup = "!HASH=${1-$(git rev-parse HEAD)} && git commit --fixup=$HASH && EDITOR=: git rebase -i --autosquash $HASH~1 && echo"

  # open a file on upstream "master"
  master = "! f() { git open upstream/$(git master-branch) $(find . -name \"$@\") ; } ; f"

  #diff against head
  # TODO: diff-head = "diff { open $(git url compare) ; }; f"

  # if this fails, fix with:
  #   git remote set-head origin -a
  # master-branch = "!BRANCH=$(git config init.defaultBranch) ; echo ${BRANCH:-master}"
  master-branch = !git branch -rl '*/HEAD' | sed 's@.*/@@'
  # not sure if new master-branch and defaultbranch work together
  config-master = "config init.defaultbranch master"
  config-main   = "config init.defaultbranch main"

  # list the branches that contain a tag
  branch-having-tag="! f() { git branch -r --contains $(git rev-list --no-walk $1) ; } ; f"
[apply]
  whitespace = fix
#[branch]
# git checkout automatically tracks the remote ()
#  autosetupmerge = true
[core]
  excludesfile = ~/.gitignore_global
  pager = less -x4
  attributesfile = ~/.gitattributes
	autocrlf = ""
# for word level highlighting
# [pager]
#   log = diff-highlight | less -R
#   show = diff-highlight | less -x4 -R
#   diff = diff-highlight | less -x4 -R
# use mac keychain for ssh passwords
[credential]
  helper = osxkeychain
[grep]
  lineNumber = true
[pull]
  ff = only
	rebase = true
[push]
  default = simple
#  default = current
[rebase]
  autosquash = true
  updateRefs = true
[color]
  branch = auto
  diff = auto
  status = auto
  ui = auto
[color "diff"]
  whitespace = red reverse
#[format]
#  pretty = %C(cyan)>> %C(yellow)%h%Creset %s %C(red)(%an, %cr)%Creset
[diff]
  algorithm = patience
	tool = smerge
# haven't played with this yet
# but in theory, it replaces all github http urls to use ssh instead
# [url "git@github.com:"]
#   insteadOf = gh:
#   insteadOf = ghub:
#   insteadOf = github:
#   insteadOf = https://github.com/
#   insteadOf = http://github.com/
[url "https://github.com/"]
	insteadOf = git@github.com:
[merge]
	tool = smerge
[difftool "smerge"]
  cmd = smerge \"$BASE\" \"$LOCAL\" \"$REMOTE\"

# echo 'merge_cmd () {
#   "$merge_tool_path" mergetool \
#     "$BASE" "$LOCAL" "$REMOTE" -o "$MERGED"
# }' > /usr/lib/git-core/mergetools/smerge

#thanks:
# http://georgebrock.com/blog/useful-git-aliases
# [init]
# defaultBranch=master
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[gpg]
  # this section has been moved to gitconfig.local
[commit]
	gpgsign = true
[tag]
	gpgsign = true
